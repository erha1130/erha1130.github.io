<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>erha&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/78fb554f8b1be4ac47614bb562f9d261</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-11T15:36:14.438Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ss</name>
    <email>kong2211416053@outlook.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内部类</title>
    <link href="http://example.com/2022/09/11/11ae825ec46f/"/>
    <id>http://example.com/2022/09/11/11ae825ec46f/</id>
    <published>2022-09-11T15:27:00.000Z</published>
    <updated>2022-09-11T15:36:14.438Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>1.局部内部类是定义在外部类的局部位置，通常在方法，代码块中<br>2.可以直接访问外部类的所有成员，包含私有的<br>3.不能添加访问修饰符，但是可以使用final修饰<br>4.作用域：仅仅在定义它的方法或代码块中(相当于局部变量)<br>5.外部类在方法中，可以创建内部类对象，然后调用方法即可访问<br>6.外部其他类不能访问局部内部类（因为局部内部类地位是一个局部变量）<br>7.如果外部类和局部内部类的成员重名，默认遵循就近原则，如果想访问外部类的成员，则可以使用 外部类名.this.成员 去访问</p><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>1.基本语法：new 类或接口(参数列表）{<br>类体<br>};</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.hspedu.innerclass;</span><br><span class="line"></span><br><span class="line">public class AnonymousInnerClass &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Outer04 outer04 = new Outer04();</span><br><span class="line">        outer04.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Outer04 &#123; //外部类</span><br><span class="line">    private int n1 = 10;//属性</span><br><span class="line">    public void method() &#123;//方法</span><br><span class="line">        //基于接口的匿名内部类</span><br><span class="line">        //3.老韩需求是 Tiger/Dog 类只是使用一次，后面再不使用</span><br><span class="line">        //4. 可以使用匿名内部类来简化开发</span><br><span class="line">        //5. tiger的编译类型 ? IA</span><br><span class="line">        //6. tiger的运行类型 ? 就是匿名内部类  Outer04$1</span><br><span class="line">        /*</span><br><span class="line">            我们看底层 会分配 类名 Outer04$1</span><br><span class="line">            class Outer04$1 implements IA &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void cry() &#123;</span><br><span class="line">                    System.out.println(&quot;老虎叫唤...&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         */</span><br><span class="line">        //7. jdk底层在创建匿名内部类 Outer04$1,立即马上就创建了 Outer04$1实例，并且把地址</span><br><span class="line">        //   返回给 tiger</span><br><span class="line">        //8. 匿名内部类使用一次，就不能再使用</span><br><span class="line">        IA tiger = new IA() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void cry() &#123;</span><br><span class="line">                System.out.println(&quot;老虎叫唤...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(&quot;tiger的运行类型=&quot; + tiger.getClass());</span><br><span class="line">        tiger.cry();</span><br><span class="line">        tiger.cry();</span><br><span class="line">        tiger.cry();</span><br><span class="line">        //演示基于类的匿名内部类</span><br><span class="line">        //分析</span><br><span class="line">        //1. father编译类型 Father</span><br><span class="line">        //2. father运行类型 Outer04$2</span><br><span class="line">        //3. 底层会创建匿名内部类</span><br><span class="line">        /*</span><br><span class="line">            class Outer04$2 extends Father&#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void test() &#123;</span><br><span class="line">                    System.out.println(&quot;匿名内部类重写了test方法&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         */</span><br><span class="line">        //4. 同时也直接返回了 匿名内部类 Outer04$2的对象</span><br><span class="line">        //5. 注意(&quot;jack&quot;) 参数列表会传递给 构造器</span><br><span class="line">        Father father = new Father(&quot;jack&quot;)&#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void test() &#123;</span><br><span class="line">                System.out.println(&quot;匿名内部类重写了test方法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(&quot;father对象的运行类型=&quot; + father.getClass());//Outer04$2</span><br><span class="line">        father.test();</span><br><span class="line"></span><br><span class="line">        //基于抽象类的匿名内部类 必须重写抽象类的所有方法</span><br><span class="line">        Animal animal = new Animal()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            void eat() &#123;</span><br><span class="line">                System.out.println(&quot;小狗吃骨头...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface IA &#123;//接口</span><br><span class="line">    public void cry();</span><br><span class="line">&#125;</span><br><span class="line">class Father &#123;//类</span><br><span class="line">    public Father(String name) &#123;//构造器</span><br><span class="line">        System.out.println(&quot;接收到name=&quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line">    public void test() &#123;//方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">abstract class Animal &#123; //抽象类</span><br><span class="line">    abstract void eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.匿名内部类既是一个类的定义，同时它本身也是一个对象。<br>3.可以直接访问外部类的所有成员，包含私有的<br>4.不能添加访问修饰符<br>5.作用域：定义它的方法或代码块中<br>6.匿名内部类—-访问——&gt;外部类成员（直接访问）<br>7.外部其他类—不能访问———&gt;匿名内部类<br>8.如果外部类和局部内部类的成员重名，默认遵循就近原则，如果想访问外部类的成员，则可以使用 外部类名.this.成员 去访问<br>9.动态绑定<br>10.当做实参直接传递，简洁高效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.hpedu.inner_;</span><br><span class="line"></span><br><span class="line">public class AnnyInnerClassExercise &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        cellphone cellphone = new cellphone();</span><br><span class="line">        cellphone.alarm(new Bell() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void ring() &#123;</span><br><span class="line">                System.out.println(&quot;pig get up&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cellphone.alarm(new Bell() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void ring() &#123;</span><br><span class="line">                System.out.println(&quot;dog get up&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Bell &#123;</span><br><span class="line">    public void ring();</span><br><span class="line">&#125;</span><br><span class="line">class cellphone &#123;</span><br><span class="line">    public void alarm(Bell bell)&#123;</span><br><span class="line">        System.out.println(&quot;bell&#x27;s hashcode is &quot;+bell);</span><br><span class="line">        bell.ring();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>notices:定义在外部类的成员位置，没有static修饰<br>1.可以添加任意修饰符<br>2.成员内部类—访问—-&gt;外部类成员（直接访问）<br>3.外部类—访问——–&gt;成员内部类（创建对象再访问）<br>4.外部其他类—–访问—–&gt;成员内部类（第一种方法：Outer08.Inner08 inner08 &#x3D; outer08.new Inner08();相当于把new Inner08（）当做是outer08的成员 第二种方法：在外部类中编写一个返回值为成员内部类对象的方法 public Inner08 getInner08Instance(){ return new Inner08; } 在main方法中调用 Outer08.Inner08 inner08Instance &#x3D; outer08.getInner08Instance(); ）<br>5.如果外部类和局部内部类的成员重名，默认遵循就近原则，如果想访问外部类的成员，则可以使用 外部类名.this.成员 去访问</p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>notices：定义在外部类的成员位置，并且有static修饰<br>1.可以添加任意访问修饰符，因为它的地位就是一个成员<br>2.作用域：和其他的成员，为整个类体<br>3.静态内部类—-访问—-&gt;外部类（直接访问所有静态成员）<br>4.外部类—–访问—–&gt;静态内部类（创建对象，再访问）<br>5.外部其他类——访问——-&gt;静态内部类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//方式 1</span><br><span class="line">//因为静态内部类，是可以通过类名直接访问(前提是满足访问权限)</span><br><span class="line">Outer10.Inner10 inner10 = new Outer10.Inner10();</span><br><span class="line">inner10.say();</span><br><span class="line">//方式 2</span><br><span class="line">//编写一个方法，可以返回静态内部类的对象实例. Outer10.Inner10 inner101 = outer10.getInner10();</span><br><span class="line">System.out.println(&quot;============&quot;);</span><br><span class="line">inner101.say();</span><br></pre></td></tr></table></figure><p>6.如果外部类和静态内部类的成员重名时，静态内部类访问时，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类名.成员)去访问</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="notepad" scheme="http://example.com/categories/notepad/"/>
    
    
    <category term="notepad" scheme="http://example.com/tags/notepad/"/>
    
  </entry>
  
  <entry>
    <title>my-first-blog</title>
    <link href="http://example.com/2022/09/11/d5cc78fd247d/"/>
    <id>http://example.com/2022/09/11/d5cc78fd247d/</id>
    <published>2022-09-11T12:50:14.000Z</published>
    <updated>2022-09-11T12:56:57.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>正文</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p><strong>加粗</strong></p><ol><li>哈哈哈</li><li>酷酷酷</li><li>辣辣辣<ol><li>哈哈哈</li><li>呃呃呃</li><li>也一样</li></ol></li><li>uuu</li></ol><p><img src="https://s2.loli.net/2022/09/11/kq1JVwNQHKUhWux.jpg" alt="R-C _1_.jpg"><br><em>city</em></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>小梅</th><th>小梅</th><th>小红</th></tr></thead><tbody><tr><td>1.2</td><td>3.4</td><td>3.3</td></tr><tr><td>5.5</td><td>5.5</td><td>4.4</td></tr></tbody></table><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p> <a href="https://www.limfx.pro/ReadArticle/57/yi-zhong-xie-zuo-de-xin-fang-fa#markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F">markdown使用教程</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int i = 3;</span><br><span class="line">i++;</span><br><span class="line">print(i);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/09/08/61e52643dc3b/"/>
    <id>http://example.com/2022/09/08/61e52643dc3b/</id>
    <published>2022-09-08T13:07:09.539Z</published>
    <updated>2022-09-08T13:07:09.539Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
