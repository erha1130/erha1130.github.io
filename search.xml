<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>枚举</title>
      <link href="/2022/09/15/6d04d56e1f7e/"/>
      <url>/2022/09/15/6d04d56e1f7e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自定义类实现枚举"><a href="#自定义类实现枚举" class="headerlink" title="自定义类实现枚举"></a>自定义类实现枚举</h2><p>1.不需要提供set方法，因为枚举对象值通常为只读<br>2.构造器私有化<br>3.本类内部创建对象<br>4.对外暴露对象。对枚举对象&#x2F;属性使用final + static 共同修饰，实现底层优化。<br>5.枚举对象名通常使用全部大写，常量的命名规范。<br>6.枚举对象根据需要，也可以有多个属性</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.hspedu.enum_;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kss</span><br><span class="line"> * @version 1.0</span><br><span class="line"> */</span><br><span class="line">public class Enumeration1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(season.SPRING);</span><br><span class="line">        System.out.println(season.AUTUMN);</span><br><span class="line">        System.out.println(season.SUMMER);</span><br><span class="line">        System.out.println(season.WINTER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class season&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String desc;</span><br><span class="line">    private season(String name, String desc) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getDesc() &#123;</span><br><span class="line">        return desc;</span><br><span class="line">    &#125;</span><br><span class="line">    public final static season SPRING = new season(&quot;spring&quot;,&quot;warm&quot;);</span><br><span class="line">    public final static season SUMMER = new season(&quot;summer&quot;,&quot;hot&quot;);</span><br><span class="line">    public final static season AUTUMN = new season(&quot;autumn&quot;,&quot;fun&quot;);</span><br><span class="line">    public final static season WINTER = new season(&quot;winter&quot;,&quot;cool&quot;);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;season&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, desc=&#x27;&quot; + desc + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line">D:\jdk8\jre\lib\resources.jar;D:\jdk8\jre\lib\rt.jar;D:\idea_java_project\chapter11\out\production\chapter11 com.hspedu.enum_.Enumeration1</span><br><span class="line">season&#123;name=&#x27;spring&#x27;, desc=&#x27;warm&#x27;&#125;</span><br><span class="line">season&#123;name=&#x27;autumn&#x27;, desc=&#x27;fun&#x27;&#125;</span><br><span class="line">season&#123;name=&#x27;summer&#x27;, desc=&#x27;hot&#x27;&#125;</span><br><span class="line">season&#123;name=&#x27;winter&#x27;, desc=&#x27;cool&#x27;&#125;</span><br></pre></td></tr></table></figure><h2 id="关键字实现枚举"><a href="#关键字实现枚举" class="headerlink" title="关键字实现枚举"></a>关键字实现枚举</h2><p>1.使用关键字enum替代class<br>2.直接使用SPRING(“spring”,”warm”)创建对象，创建对象必须在enum类的最前面，如果有多个常量对象，使用“,”号间隔</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.hspedu.enum_.Enumeration04;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kss</span><br><span class="line"> * @version 1.0</span><br><span class="line"> */</span><br><span class="line">public class Enumeration04 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(Season.SPRING);</span><br><span class="line">        System.out.println(Season.SUMMER);</span><br><span class="line">        System.out.println(Season.AUTUMN);</span><br><span class="line">        System.out.println(Season.WINTER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">enum Season&#123;</span><br><span class="line">    SPRING(&quot;spring&quot;,&quot;warm&quot;),SUMMER(&quot;summer&quot;,&quot;hot&quot;),</span><br><span class="line">    AUTUMN(&quot;autumn&quot;,&quot;fun&quot;),WINTER(&quot;winter&quot;,&quot;cool&quot;);</span><br><span class="line">    private String name;</span><br><span class="line">    private String desc;</span><br><span class="line">    Season(String name, String desc) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getDesc() &#123;</span><br><span class="line">        return desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Season&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, desc=&#x27;&quot; + desc + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>notice:<br>当我们使用enum关键字开发一个枚举类时，默认会继承Enum类，而且时一个final类<br><img src="/../../themes/butterfly/source/img/%E6%88%AA%E5%9B%BE/ps1.png"><br>2.如果使用的是无参构造器，创建常量对象，则可以省略()<br>3.调用枚举对象 不用加() ;enum名.对象名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class exercise01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    gender boy = gender.BOY;</span><br><span class="line">    gender boy1 = gender.BOY;</span><br><span class="line">        System.out.println(boy1 == boy);//true</span><br><span class="line">        System.out.println(boy);//BOY</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">enum gender&#123;</span><br><span class="line">    BOY,GIRL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2022/09/14/fa803d20da96/"/>
      <url>/2022/09/14/fa803d20da96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>this is a page of test😂😂😂<br>this is a page of test</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的编码设置</title>
      <link href="/2022/09/14/cc9650beda3b/"/>
      <url>/2022/09/14/cc9650beda3b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MySQL5-7中"><a href="#MySQL5-7中" class="headerlink" title="MySQL5.7中"></a>MySQL5.7中</h2><h3 id="问题再现：命令行操作sql乱码问题"><a href="#问题再现：命令行操作sql乱码问题" class="headerlink" title="问题再现：命令行操作sql乱码问题"></a>问题再现：命令行操作sql乱码问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO t_stu VALUES(1,&#x27;张三&#x27;,&#x27;男&#x27;);</span><br><span class="line">ERROR 1366 (HY000): Incorrect string value: &#x27;\xD5\xC5\xC8\xFD&#x27; for column &#x27;sname&#x27; at</span><br><span class="line">row 1</span><br></pre></td></tr></table></figure><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>步骤1：查看编码命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;character_%&#x27;;</span><br><span class="line">show variables like &#x27;collation_%&#x27;;</span><br></pre></td></tr></table></figure><p>步骤2：修改mysql的数据目录下的my.ini配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysql] #大概在63行左右，在其下添加</span><br><span class="line">...</span><br><span class="line">default-character-set=utf8 #默认字符集</span><br><span class="line">[mysqld] # 大概在76行左右，在其下添加</span><br><span class="line">...</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><p>步骤3：重启服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动 MySQL 服务命令：</span><br><span class="line">net start MySQL服务名</span><br><span class="line"># 停止 MySQL 服务命令：</span><br><span class="line">net stop MySQL服务名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d:\kss_blog&gt;net start mysql57</span><br><span class="line">发生系统错误 5。</span><br><span class="line"></span><br><span class="line">拒绝访问。</span><br></pre></td></tr></table></figure><p>原因：不是以管理员身份打开终端<br>步骤4：查看编码命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;character_%&#x27;</span><br><span class="line">    -&gt; ;</span><br><span class="line">+--------------------------+-----------------------------+</span><br><span class="line">| Variable_name            | Value                       |</span><br><span class="line">+--------------------------+-----------------------------+</span><br><span class="line">| character_set_client     | gbk                         |</span><br><span class="line">| character_set_connection | gbk                         |</span><br><span class="line">| character_set_database   | utf8                        |</span><br><span class="line">| character_set_filesystem | binary                      |</span><br><span class="line">| character_set_results    | gbk                         |</span><br><span class="line">| character_set_server     | utf8                        |</span><br><span class="line">| character_set_system     | utf8                        |</span><br><span class="line">| character_sets_dir       | D:\MySQL5.7\share\charsets\ |</span><br><span class="line">+--------------------------+-----------------------------+</span><br><span class="line">8 rows in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables like &#x27;collation_%&#x27;;</span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">| Variable_name        | Value           |</span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">| collation_connection | gbk_chinese_ci  |</span><br><span class="line">| collation_database   | utf8_general_ci |</span><br><span class="line">| collation_server     | utf8_general_ci |</span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">3 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="MySQL8-0中"><a href="#MySQL8-0中" class="headerlink" title="MySQL8.0中"></a>MySQL8.0中</h2><p>在MySQL 8.0版本之前，默认字符集为latin1，utf8字符集指向的是utf8mb3。网站开发人员在数据库设计<br>的时候往往会将编码修改为utf8字符集。如果遗忘修改默认的编码，就会出现乱码的问题。从MySQL 8.0<br>开始，数据库的默认编码改为 utf8mb4 ，从而避免了上述的乱码问题。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图形化数据库使用</title>
      <link href="/2022/09/14/f348a697f201/"/>
      <url>/2022/09/14/f348a697f201/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Navicat使用"><a href="#Navicat使用" class="headerlink" title="Navicat使用"></a>Navicat使用</h2><p>1.下载</p><p><a href="https://navicat.com.cn/download/navicat-for-mysql">navicat下载链接</a><br><img src="https://s2.loli.net/2022/09/14/MyR1ecQPuJoxNrw.png"><br>2.安装</p><p>3.连接数据库<br><img src="https://s2.loli.net/2022/09/14/cKFiaNs6yGLV8pD.png"></p><p>4.创建查询<br><img src="https://s2.loli.net/2022/09/14/RIEQDJ1YG6AjmSV.png"></p><h2 id="MySQL-workbench"><a href="#MySQL-workbench" class="headerlink" title="MySQL workbench"></a>MySQL workbench</h2><p>MySQL Workbench分为社区版和商业版，社区版完全免费，而商业版则是按年收费。<br>下载地址：<a href="http://dev.mysql.com/downloads/workbench/%E3%80%82">http://dev.mysql.com/downloads/workbench/。</a></p><h2 id="SQLyog"><a href="#SQLyog" class="headerlink" title="SQLyog"></a>SQLyog</h2><p>下载地<br>址：<a href="http://www.webyog.com/">http://www.webyog.com/</a><br><img src="https://s2.loli.net/2022/09/14/mJoFY7aziBcSdH4.png"></p><h2 id="dbeaver"><a href="#dbeaver" class="headerlink" title="dbeaver"></a>dbeaver</h2><p>DBeaver 是用Java编程语言开发的，所以需要拥有 JDK（Java Development ToolKit）环<br>境。如果电脑上没有JDK，在选择安装DBeaver组件时，勾选“Include Java”即可。</p><p>下载地址：<a href="https://dbeaver.io/download/">https://dbeaver.io/download/</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql使用</title>
      <link href="/2022/09/12/d458dc3fcaef/"/>
      <url>/2022/09/12/d458dc3fcaef/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-查看所有的数据库"><a href="#1-查看所有的数据库" class="headerlink" title="1.查看所有的数据库"></a>1.查看所有的数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>“information_schema”是 MySQL 系统自带的数据库，主要保存 MySQL 数据库服务器的系统信息，<br>比如数据库的名称、数据表的名称、字段名称、存取权限、数据文件 所在的文件夹和系统使用的<br>文件夹，等等<br>“performance_schema”是 MySQL 系统自带的数据库，可以用来监控 MySQL 的各类性能指标。<br>“sys”数据库是 MySQL 系统自带的数据库，主要作用是以一种更容易被理解的方式展示 MySQL 数据<br>库服务器的各类性能指标，帮助系统管理员和开发人员监控 MySQL 的技术性能。<br>“mysql”数据库保存了 MySQL 数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的<br>字符集、约束检查信息，等等</p><h2 id="2-创建自己的数据库"><a href="#2-创建自己的数据库" class="headerlink" title="2.创建自己的数据库"></a>2.创建自己的数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create databases 数据库名;</span><br></pre></td></tr></table></figure><h2 id="3-使用自己的数据库"><a href="#3-使用自己的数据库" class="headerlink" title="3.使用自己的数据库"></a>3.使用自己的数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><p>使用完use语句之后，如果接下来的SQL都是针对一个数据库操作的，那就不用重复use了，如果要针对另一个数据库操作，那么要重新use。</p><h2 id="4-查看某个库的所有表格"><a href="#4-查看某个库的所有表格" class="headerlink" title="4.查看某个库的所有表格"></a>4.查看某个库的所有表格</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables; #要求前面有use语句</span><br><span class="line">show tables from 数据库名;</span><br></pre></td></tr></table></figure><h2 id="5-创建新的表格"><a href="#5-创建新的表格" class="headerlink" title="5.创建新的表格"></a>5.创建新的表格</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名称(字段名 数据类型,字段名 数据类型);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建学生表</span><br><span class="line">create table student(id int,name varchar(20) #说名字最长不超过20个字符</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="6-查看一个表的数据"><a href="#6-查看一个表的数据" class="headerlink" title="6.查看一个表的数据"></a>6.查看一个表的数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 数据库表名称;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看学生表的数据</span><br><span class="line">select * from student;</span><br></pre></td></tr></table></figure><h2 id="7、添加一条记录"><a href="#7、添加一条记录" class="headerlink" title="7、添加一条记录"></a>7、添加一条记录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名称 values(值列表);</span><br><span class="line">#添加两条记录到student表中</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;);</span><br><span class="line">insert into student values(2,&#x27;李四&#x27;);</span><br></pre></td></tr></table></figure><h2 id="8-查看表的创建信息"><a href="#8-查看表的创建信息" class="headerlink" title="8.查看表的创建信息"></a>8.查看表的创建信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table 表名称\G</span><br><span class="line">#查看student表的详细创建信息</span><br><span class="line">show create table student\G</span><br><span class="line">#结果如下</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Table: student</span><br><span class="line">Create Table: CREATE TABLE `student` (</span><br><span class="line">`id` int(11) DEFAULT NULL,</span><br><span class="line">`name` varchar(20) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>上面的结果显示student的表格的默认字符集是“latin1”不支持中文。</p><h2 id="9、查看数据库的创建信息"><a href="#9、查看数据库的创建信息" class="headerlink" title="9、查看数据库的创建信息"></a>9、查看数据库的创建信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create database 数据库名\G</span><br><span class="line">#查看atguigudb数据库的详细创建信息</span><br><span class="line">show create database atguigudb\G</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#结果如下</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">Database: atguigudb</span><br><span class="line">Create Database: CREATE DATABASE `atguigudb` /*!40100 DEFAULT CHARACTER SET latin1 */</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>上面的结果显示atguigudb数据库也不支持中文，字符集默认是latin1。</p><h2 id="10-删除表格"><a href="#10-删除表格" class="headerlink" title="10.删除表格"></a>10.删除表格</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table 表名称;</span><br><span class="line">#删除学生表</span><br><span class="line">drop table student;</span><br></pre></td></tr></table></figure><h2 id="11-删除数据库"><a href="#11-删除数据库" class="headerlink" title="11.删除数据库"></a>11.删除数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database 数据库名;</span><br><span class="line">#删除atguigudb数据库</span><br><span class="line">drop database atguigudb;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类</title>
      <link href="/2022/09/11/11ae825ec46f/"/>
      <url>/2022/09/11/11ae825ec46f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>1.局部内部类是定义在外部类的局部位置，通常在方法，代码块中<br>2.可以直接访问外部类的所有成员，包含私有的<br>3.不能添加访问修饰符，但是可以使用final修饰<br>4.作用域：仅仅在定义它的方法或代码块中(相当于局部变量)<br>5.外部类在方法中，可以创建内部类对象，然后调用方法即可访问<br>6.外部其他类不能访问局部内部类（因为局部内部类地位是一个局部变量）<br>7.如果外部类和局部内部类的成员重名，默认遵循就近原则，如果想访问外部类的成员，则可以使用 外部类名.this.成员 去访问</p><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>1.基本语法：new 类或接口(参数列表）{<br>类体<br>};</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.hspedu.innerclass;</span><br><span class="line"></span><br><span class="line">public class AnonymousInnerClass &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Outer04 outer04 = new Outer04();</span><br><span class="line">        outer04.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Outer04 &#123; //外部类</span><br><span class="line">    private int n1 = 10;//属性</span><br><span class="line">    public void method() &#123;//方法</span><br><span class="line">        //基于接口的匿名内部类</span><br><span class="line">        //3.老韩需求是 Tiger/Dog 类只是使用一次，后面再不使用</span><br><span class="line">        //4. 可以使用匿名内部类来简化开发</span><br><span class="line">        //5. tiger的编译类型 ? IA</span><br><span class="line">        //6. tiger的运行类型 ? 就是匿名内部类  Outer04$1</span><br><span class="line">        /*</span><br><span class="line">            我们看底层 会分配 类名 Outer04$1</span><br><span class="line">            class Outer04$1 implements IA &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void cry() &#123;</span><br><span class="line">                    System.out.println(&quot;老虎叫唤...&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         */</span><br><span class="line">        //7. jdk底层在创建匿名内部类 Outer04$1,立即马上就创建了 Outer04$1实例，并且把地址</span><br><span class="line">        //   返回给 tiger</span><br><span class="line">        //8. 匿名内部类使用一次，就不能再使用</span><br><span class="line">        IA tiger = new IA() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void cry() &#123;</span><br><span class="line">                System.out.println(&quot;老虎叫唤...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(&quot;tiger的运行类型=&quot; + tiger.getClass());</span><br><span class="line">        tiger.cry();</span><br><span class="line">        tiger.cry();</span><br><span class="line">        tiger.cry();</span><br><span class="line">        //演示基于类的匿名内部类</span><br><span class="line">        //分析</span><br><span class="line">        //1. father编译类型 Father</span><br><span class="line">        //2. father运行类型 Outer04$2</span><br><span class="line">        //3. 底层会创建匿名内部类</span><br><span class="line">        /*</span><br><span class="line">            class Outer04$2 extends Father&#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void test() &#123;</span><br><span class="line">                    System.out.println(&quot;匿名内部类重写了test方法&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         */</span><br><span class="line">        //4. 同时也直接返回了 匿名内部类 Outer04$2的对象</span><br><span class="line">        //5. 注意(&quot;jack&quot;) 参数列表会传递给 构造器</span><br><span class="line">        Father father = new Father(&quot;jack&quot;)&#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void test() &#123;</span><br><span class="line">                System.out.println(&quot;匿名内部类重写了test方法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(&quot;father对象的运行类型=&quot; + father.getClass());//Outer04$2</span><br><span class="line">        father.test();</span><br><span class="line"></span><br><span class="line">        //基于抽象类的匿名内部类 必须重写抽象类的所有方法</span><br><span class="line">        Animal animal = new Animal()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            void eat() &#123;</span><br><span class="line">                System.out.println(&quot;小狗吃骨头...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface IA &#123;//接口</span><br><span class="line">    public void cry();</span><br><span class="line">&#125;</span><br><span class="line">class Father &#123;//类</span><br><span class="line">    public Father(String name) &#123;//构造器</span><br><span class="line">        System.out.println(&quot;接收到name=&quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line">    public void test() &#123;//方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">abstract class Animal &#123; //抽象类</span><br><span class="line">    abstract void eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.匿名内部类既是一个类的定义，同时它本身也是一个对象。<br>3.可以直接访问外部类的所有成员，包含私有的<br>4.不能添加访问修饰符<br>5.作用域：定义它的方法或代码块中<br>6.匿名内部类—-访问——&gt;外部类成员（直接访问）<br>7.外部其他类—不能访问———&gt;匿名内部类<br>8.如果外部类和局部内部类的成员重名，默认遵循就近原则，如果想访问外部类的成员，则可以使用 外部类名.this.成员 去访问<br>9.动态绑定<br>10.当做实参直接传递，简洁高效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.hpedu.inner_;</span><br><span class="line"></span><br><span class="line">public class AnnyInnerClassExercise &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        cellphone cellphone = new cellphone();</span><br><span class="line">        cellphone.alarm(new Bell() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void ring() &#123;</span><br><span class="line">                System.out.println(&quot;pig get up&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cellphone.alarm(new Bell() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void ring() &#123;</span><br><span class="line">                System.out.println(&quot;dog get up&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Bell &#123;</span><br><span class="line">    public void ring();</span><br><span class="line">&#125;</span><br><span class="line">class cellphone &#123;</span><br><span class="line">    public void alarm(Bell bell)&#123;</span><br><span class="line">        System.out.println(&quot;bell&#x27;s hashcode is &quot;+bell);</span><br><span class="line">        bell.ring();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>notices:定义在外部类的成员位置，没有static修饰<br>1.可以添加任意修饰符<br>2.成员内部类—访问—-&gt;外部类成员（直接访问）<br>3.外部类—访问——–&gt;成员内部类（创建对象再访问）<br>4.外部其他类—–访问—–&gt;成员内部类（第一种方法：Outer08.Inner08 inner08 &#x3D; outer08.new Inner08();相当于把new Inner08（）当做是outer08的成员 第二种方法：在外部类中编写一个返回值为成员内部类对象的方法 public Inner08 getInner08Instance(){ return new Inner08; } 在main方法中调用 Outer08.Inner08 inner08Instance &#x3D; outer08.getInner08Instance(); ）<br>5.如果外部类和局部内部类的成员重名，默认遵循就近原则，如果想访问外部类的成员，则可以使用 外部类名.this.成员 去访问</p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>notices：定义在外部类的成员位置，并且有static修饰<br>1.可以添加任意访问修饰符，因为它的地位就是一个成员<br>2.作用域：和其他的成员，为整个类体<br>3.静态内部类—-访问—-&gt;外部类（直接访问所有静态成员）<br>4.外部类—–访问—–&gt;静态内部类（创建对象，再访问）<br>5.外部其他类——访问——-&gt;静态内部类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//方式 1</span><br><span class="line">//因为静态内部类，是可以通过类名直接访问(前提是满足访问权限)</span><br><span class="line">Outer10.Inner10 inner10 = new Outer10.Inner10();</span><br><span class="line">inner10.say();</span><br><span class="line">//方式 2</span><br><span class="line">//编写一个方法，可以返回静态内部类的对象实例. Outer10.Inner10 inner101 = outer10.getInner10();</span><br><span class="line">System.out.println(&quot;============&quot;);</span><br><span class="line">inner101.say();</span><br></pre></td></tr></table></figure><p>6.如果外部类和静态内部类的成员重名时，静态内部类访问时，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类名.成员)去访问</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my-first-blog</title>
      <link href="/2022/09/11/d5cc78fd247d/"/>
      <url>/2022/09/11/d5cc78fd247d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>正文</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p><strong>加粗</strong></p><ol><li>哈哈哈</li><li>酷酷酷</li><li>辣辣辣<ol><li>哈哈哈</li><li>呃呃呃</li><li>也一样</li></ol></li><li>uuu</li></ol><p><img src="https://s2.loli.net/2022/09/11/kq1JVwNQHKUhWux.jpg" alt="R-C _1_.jpg"><br><em>city</em></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>小梅</th><th>小梅</th><th>小红</th></tr></thead><tbody><tr><td>1.2</td><td>3.4</td><td>3.3</td></tr><tr><td>5.5</td><td>5.5</td><td>4.4</td></tr></tbody></table><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p> <a href="https://www.limfx.pro/ReadArticle/57/yi-zhong-xie-zuo-de-xin-fang-fa#markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F">markdown使用教程</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int i = 3;</span><br><span class="line">i++;</span><br><span class="line">print(i);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/08/61e52643dc3b/"/>
      <url>/2022/09/08/61e52643dc3b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
